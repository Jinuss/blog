(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{512:function(t,e,a){"use strict";a.r(e);var s=a(4),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("p",[e("em",[t._v("ECMAScript2017")]),t._v("于2017年6月正式发布， 本文会介绍"),e("em",[t._v("ECMAScript2017(ES8)")]),t._v("，即ECMAScript的第8个版本的新特性。")]),t._v(" "),e("p",[t._v("以下摘自官网："),e("a",{attrs:{href:"https://tc39.es/ecma262/multipage/#sec-intro",target:"_blank",rel:"noopener noreferrer"}},[t._v("ecma-262"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("ECMAScript 2017 introduced Async Functions, Shared Memory, and Atomics along with smaller language and library enhancements, bug fixes, and editorial updates. Async functions improve the asynchronous programming experience by providing syntax for promise-returning functions. Shared Memory and Atomics introduce a new memory model that allows multi-agent programs to communicate using atomic operations that ensure a well-defined execution order even on parallel CPUs. It also included new static methods on Object: Object.values, Object.entries, and Object.getOwnPropertyDescriptors.")])]),t._v(" "),e("h2",{attrs:{id:"ecmascript2017-es8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript2017-es8"}},[t._v("#")]),t._v(" "),e("strong",[t._v("ECMAScript2017(ES8)")])]),t._v(" "),e("p",[t._v("ES8 新增了一些新特性，比如：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Object.values")]),t._v("：返回对象所有属性值"),e("code",[t._v("value")]),t._v("的数组")]),t._v(" "),e("li",[e("code",[t._v("Object.entries")]),t._v("：返回对象所有属性键值对"),e("code",[t._v("[key,value]")]),t._v("的数组")]),t._v(" "),e("li",[e("code",[t._v("Object.getOwnPropertyDescriptors")]),t._v("：返回对象所有属性的描述符")]),t._v(" "),e("li",[e("code",[t._v("String.prototype.padStart")]),t._v("和"),e("code",[t._v("String.prototype.padEnd")]),t._v("：用于字符串补全")]),t._v(" "),e("li",[e("code",[t._v("async/await")]),t._v("：异步编程的新方式")]),t._v(" "),e("li",[e("code",[t._v("SharedArrayBuffer")]),t._v("：共享内存的新方式")]),t._v(" "),e("li",[e("code",[t._v("Atomics")]),t._v("：原子操作的新方式")])]),t._v(" "),e("h3",{attrs:{id:"object方面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object方面"}},[t._v("#")]),t._v(" "),e("code",[t._v("Object")]),t._v("方面")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Object.values")]),t._v("和"),e("code",[t._v("Object.entries")]),t._v("中返回的数组顺序都是以与"),e("code",[t._v("for in")]),t._v("循环所提供顺序相同，")])]),t._v(" "),e("h4",{attrs:{id:"浏览器兼容性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/object.values.png"}}),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/object.entries.png"}}),t._v(" "),e("ul",[e("li",[e("code",[t._v("Object.getOwnPropertyDescriptors")]),t._v("方法会返回指定对象的所有属性描述符，对象自身的属性描述符是直接在对象上定义的，不会从对象的原型继承。")])]),t._v(" "),e("h4",{attrs:{id:"浏览器兼容性-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性-2"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/object.getOwnProperptyDescription.png"}}),t._v(" "),e("h3",{attrs:{id:"string方面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string方面"}},[t._v("#")]),t._v(" "),e("code",[t._v("String")]),t._v("方面")]),t._v(" "),e("p",[e("code",[t._v("padStart")]),t._v("和"),e("code",[t._v("padEnd")]),t._v("方法用于从前或从后补全字符串，会返回补全后的新字符串，不会改变原字符串。其语法如下：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("padStart")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetLength"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" padString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("padEnd")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetLength"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" padString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[e("code",[t._v("targetLength")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("目标长度，即补全后的字符串长度")]),t._v(" "),e("li",[t._v("如果目标长度小于等于当前字符串长度，返回当前字符串")])]),t._v(" "),e("p",[e("code",[t._v("padString")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("补全字符串，默认使用空格补全")]),t._v(" "),e("li",[t._v("如果"),e("code",[t._v("padString")]),t._v("长度大于目标长度，会截取超出部分")])]),t._v(" "),e("h4",{attrs:{id:"浏览器兼容性-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性-3"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/pad-start-end.png"}}),t._v(" "),e("h3",{attrs:{id:"async和await"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async和await"}},[t._v("#")]),t._v(" "),e("code",[t._v("async")]),t._v("和"),e("code",[t._v("await")])]),t._v(" "),e("p",[e("code",[t._v("async")]),t._v("和"),e("code",[t._v("await")]),t._v("就是异步编程的语法糖，可以使异步代码看起来像同步代码一样。")]),t._v(" "),e("h4",{attrs:{id:"浏览器兼容性-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性-4"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/async.png"}}),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/await.png"}}),t._v(" "),e("h3",{attrs:{id:"sharedarraybuffer对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sharedarraybuffer对象"}},[t._v("#")]),t._v(" "),e("code",[t._v("SharedArrayBuffer")]),t._v("对象")]),t._v(" "),e("p",[e("code",[t._v("SharedArrayBuffer")]),t._v("是一种新的内存模型，用于在多个线程之间共享内存。该模型通常用来表示一个通用的，固定长度的原始二进制数据缓冲区，但是其不能被分离。")]),t._v(" "),e("h4",{attrs:{id:"浏览器兼容性-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性-5"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/sharedArrayBuffer.png"}}),t._v(" "),e("h3",{attrs:{id:"atomics对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#atomics对象"}},[t._v("#")]),t._v(" "),e("code",[t._v("Atomics")]),t._v("对象")]),t._v(" "),e("p",[t._v("共享内存能被同时创建和更新于工作线程或主线程。")]),t._v(" "),e("p",[e("code",[t._v("Atomics")]),t._v("对象提供了一组静态方法，用于在"),e("code",[t._v("SharedArrayBuffer")]),t._v("对象上执行原子操作。"),e("code",[t._v("Atomics")]),t._v("对象不是构造函数，因此不能使用"),e("code",[t._v("new")]),t._v("运算符，也不能当做函数直接调用。其所有属性和方法都是静态的，类似与"),e("code",[t._v("Math")]),t._v("对象。")]),t._v(" "),e("h4",{attrs:{id:"浏览器兼容性-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性-6"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Jinuss/image-host/blog/Atomics.png"}})])}),[],!1,null,null,null);e.default=r.exports}}]);