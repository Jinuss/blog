(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{456:function(t,e,s){"use strict";s.r(e);var a=s(4),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("本文将介绍 4 个高级的 JS API，分别是："),e("code",[t._v("MutationObserver")]),t._v("、"),e("code",[t._v("ResizeObserver")]),t._v("、"),e("code",[t._v("IntersectionObserver")]),t._v("、"),e("code",[t._v("PerformanceObserver")]),t._v("、 "),e("code",[t._v("getComputedStyle")]),t._v("、"),e("code",[t._v("getBoundingClientRect")]),t._v("、"),e("code",[t._v("requestAnimationFrame")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"变动观察器-mutationobserver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变动观察器-mutationobserver"}},[t._v("#")]),t._v(" 变动观察器 "),e("code",[t._v("MutationObserver")])]),t._v(" "),e("p",[e("code",[t._v("MutationObserver")]),t._v(" 是一个可以监听 DOM 树变化的 API，可以实时监听 DOM 对象树的任何变化，包括添加、删除、修改、移动等。它的使用方法如下：")]),t._v(" "),e("blockquote",[e("p",[t._v("使用例子如下")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回调函数: mutations为变化数组,即节点变化记录列表，observer为MutationObserver对象")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("callback")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("mutations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" observer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observer的配置选项")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  attributes: 表示监听目标的节点的属性值是否变化,默认为false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  childList: 表示监听目标的节点的子节点是否变化,比如添加或者删除目标子节点,不包括修改子节点以及子节点后代的变化,默认为false,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  characterData: 表示监听目标的节点的文本内容是否变化,默认为false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  subtree: 表示监听目标的后代节点是否变化,默认为false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  attributeOldValue: 表示是否记录属性变化前的值,默认为false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  attributeFilter: 表示监听目标的属性变化,默认为null")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  characterDataOldValue: 表示是否记录文本变化前的值,默认为false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("attributes")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("childList")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("characterData")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个观察者实例并传入回调函数")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" observer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MutationObserver")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br")])]),e("p",[e("code",[t._v("MutationObserver")]),t._v("的实例方法")]),t._v(" "),e("ul",[e("li",[t._v("1.observe(target, config): 开始监听目标元素的变化")]),t._v(" "),e("li",[t._v("2.disconnect(): 停止监听目标元素的变化")]),t._v(" "),e("li",[t._v("3.takeRecords(): 返回一个数组，包含所有已触发的监听事件")])]),t._v(" "),e("h4",{attrs:{id:"resizeobserver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resizeobserver"}},[t._v("#")]),t._v(" "),e("code",[t._v("ResizeObserver")])]),t._v(" "),e("p",[e("code",[t._v("ResizeObserver")]),t._v("是一个JavaScript API，用于监听DOM元素的尺寸和位置的变化。它可以观察一个或多个DOM元素,适用于响应式设计和自适应布局\n"),e("code",[t._v("ResizeObserver")]),t._v("的回调是异步执行的，所以可以在回调函数中执行一些耗时的操作，如计算性能指标等。另外它还避免了在自身回调中调整大小，从而触发的无限回调和循环依赖。它仅通过在后续帧中处理DOM中更深层次的元素来实现优化。如果浏览器遵循规范，则只会在绘制前或布局后触发调用。\n"),e("code",[t._v("ResizeObserver")]),t._v("是一个构造函数,在实例化时传入一个回调函数，回调函数可以接受一个参数，该参数是一个数组包含所有被观察的DOM元素。`")]),t._v(" "),e("h4",{attrs:{id:"intersectionobserver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#intersectionobserver"}},[t._v("#")]),t._v(" "),e("code",[t._v("IntersectionObserver")])]),t._v(" "),e("p",[e("code",[t._v("IntersectionObserver")]),t._v(" 又称交叉观察者，当元素出现在视口时会触发")]),t._v(" "),e("h4",{attrs:{id:"performanceobserver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#performanceobserver"}},[t._v("#")]),t._v(" "),e("code",[t._v("PerformanceObserver")])]),t._v(" "),e("p",[e("code",[t._v("PerformanceObserver")]),t._v("可以观察页面性能，包括资源加载、渲染、用户交互等。`")]),t._v(" "),e("h4",{attrs:{id:"getcomputedstyle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getcomputedstyle"}},[t._v("#")]),t._v(" "),e("code",[t._v("getComputedStyle")])]),t._v(" "),e("h4",{attrs:{id:"getboundingclientrect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getboundingclientrect"}},[t._v("#")]),t._v(" "),e("code",[t._v("getBoundingClientRect")])]),t._v(" "),e("h4",{attrs:{id:"requestanimationframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe"}},[t._v("#")]),t._v(" "),e("code",[t._v("requestAnimationFrame")])])])}),[],!1,null,null,null);e.default=r.exports}}]);